package Refund;
import utility.Constant;
import java.io.IOException;
import java.sql.Driver;
import java.util.ArrayList;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import travlogix.Wrappermethods;
import atu.testng.reports.listeners.ATUReportsListener;
import atu.testng.reports.listeners.ConfigurationListener;
import atu.testng.reports.listeners.MethodListener;
@Listeners({ ATUReportsListener.class, ConfigurationListener.class, MethodListener.class })
public class Airrefund
{

	static {

		// System.setProperty("atu.reporter.config",
		// "C:\\ATUReports\\atu.properties");
		System.setProperty("atu.reporter.config", utility.Constant.ATUREPORTS);

	}

	Wrappermethods wm;

	@BeforeTest
	public void instantiation() {
		wm = new Wrappermethods();

	}

	@BeforeMethod
	public void browesrnstatiation()

	{

		wm.launchbrowser("chrome", utility.Constant.TRAVELOGIXURL);

	}

	@Test(dataProvider = "dp")
	public void Airpositive(String Username, String Password, String Leftsidemenu, String ActiveFrom1,
			String ActiveFrom2, String ActiveFrom3, String Docktype, String Docktypeindex, String Salesbracnh,
			String Salesbracnhindex, String Customer, String Customerindex, String Leadpaxnamee,
			String dktClientReference, String Tickectstatusindex, String Airline, String Airlineindex,
			String Salesbranch, String Salesbranchindex, String AatdTicketNumber, String ClassTypeCodelistbox,
			String Payableagent, String Payableagentindexx, String Sourceagent, String Sourceagentindexx,
			String issuemodeindex, String Servicetype, String Servicetypeindexx, String AatdPassengerName,
			String PAxtypeindex, String Bookingexecutive, String Bookingexecutiveindex, String AirIssuingExecutieveName,
			String AirIssuingExecutieveNameindex, String Salesexecutive, String Salesexecutiveindex,
			String intedomectiv, String intedomectivindex, String AatdPnrNumber, String Destination,
			String Destinationindexx, String Remarks, String issuepccindex, String Bookingdate1, String Bookingdate2,
			String Bookingdate3, String Bookingpccc, String AtfdHighFare, String AtfdLowFare, String AtfdReasonCode,
			String Fromsector, String Fromsectorindex, String Tosector, String Tosectorindex, String AasegFlightNo,
			String Flightcalssindexx, String Bookingdate4, String Bookingdate5, String Bookingdate6,
			String AasegDepTime, String Bookingdate7, String Bookingdate8, String Bookingdate9, String AasegArrTime,
			String AasegCouponNumber, String AasegDuration, String AasegFareBasis, String Couponstatusindex,
			String AasegSectorMiles, String AasegSectorC02, String Processtype, String Processtypeindex,
			String Currency, String Currecnyindex, String AtfdBaseFare, String AtfdDealFare, String Aatcode,
			String Aatcodeindex, String AatAmount, String Namee, String Nameeindex, String AtscBaseAmount,
			String AtfdCommPercent1, String AtfdCommPercent2, String Agentincetive, String Agentincetiveindexx,
			String AtfdDiscPercent1,String Modeindex,String Selectedbranch,String TravelStatusDN,
			String Class,String issuemode) throws Exception

	{

		Thread.sleep(2000);

		// wm.sendtextbyid("", );
		wm.sendtextbyid("LoginCode", Username);
		Thread.sleep(50);
		wm.stab("LoginCode");
		wm.sendtextbyid("Password", Password);
		Thread.sleep(50);
		wm.clickbyxpath("//input[@value='Login']");
		Thread.sleep(900);

		// screnn===========================================================
		wm.sendtextbyid("input-items", Leftsidemenu);
		Thread.sleep(500);
		wm.clickbyid("modCAS001");
		Thread.sleep(500);
		wm.clickbyid("pgmSAL001");
		wm.sleep();

		wm.clickbyid("btnMainAdd");

		Thread.sleep(2000);

		wm.sendtextbycssselecotr("#DktDate", "" + ActiveFrom1 + "-" + ActiveFrom2 + "-" + ActiveFrom3);

		// Dockett
		wm.sendtextbyxvalue("//input[@aria-owns='dktDocTypeCode_listbox']", Docktype);
		Thread.sleep(50);
		wm.Listandenter("//*[@id='dktDocTypeCode_listbox']/li", Docktypeindex);
		Thread.sleep(150);

		// Salesbranch
		wm.sendtextbyxvalue("//input[@aria-owns='DktBranchKey_listbox']", Salesbracnh);
		Thread.sleep(50);
		wm.Listandenter("//*[@id='DktBranchKey_listbox']/li", Salesbracnhindex);
		Thread.sleep(150);

		// customerr
		wm.sendtextbyxvalue("//input[@aria-owns='DktPartnername_listbox']", Customer);
		Thread.sleep(50);
		wm.Listandenter("//*[@id='DktPartnername_listbox']/li", Customerindex);
		Thread.sleep(150);

		wm.sendtextbycssselecotrwithoutclear("#dktLeadPaxName", "" + Leadpaxnamee);
		Thread.sleep(200);

		// clintrefecnce
		wm.sendtextbycssselecotrwithoutclear("#dktClientReference", "" + dktClientReference);
		Thread.sleep(150);

		wm.Listandenter("//i[@class='fa fa-chevron-down']", "0");
		Thread.sleep(200);
		wm.Listandenter("//i[@class='fa fa-plus']", "0");
		Thread.sleep(2500);

		// Ait
		// ===============================================================================
				
			
				

				
		
		wm.sleep();
		Thread.sleep(300);

	}

	@AfterMethod
	public void close()

	{
		wm.close();

	}

	@DataProvider(name = "dp")
	public Object[][] dp() throws IOException {

		return Wrappermethods.getSheet("Airpositive", "Airpositive");

	}
}